(()=>{"use strict";class e{constructor(e,t){this.fallbackText=t,this.contentTemplateEl=document.getElementById(`${e}`),this.modalTemplateEl=document.getElementById("modal-template")}show(){if("content"in document.createElement("template")){const e=document.importNode(this.modalTemplateEl.content,!0);this.modalElement=e.querySelector(".modal"),this.backdropElement=e.querySelector(".backdrop");const t=document.importNode(this.contentTemplateEl.content,!0);this.modalElement.appendChild(t),document.body.insertAdjacentElement("afterbegin",this.modalElement),document.body.insertAdjacentElement("afterbegin",this.backdropElement)}else alert(this.fallbackText)}hide(){this.modalElement&&(document.body.removeChild(this.modalElement),document.body.removeChild(this.backdropElement),this.modalElement=null,this.backdropElement=null)}}class t{constructor(e){this.render(e)}render(e){if(!google)return void alert("Could not load maps library - please try again later!");const t=new google.maps.Map(document.getElementById("map"),{center:e,zoom:16});new google.maps.Marker({position:e,map:t})}}const o="YOUR_API_KEY";new class{constructor(){const e=document.querySelector("form"),t=document.getElementById("locate-btn");this.shareBtn=document.getElementById("share-btn"),t.addEventListener("click",this.locateUserHandler.bind(this)),this.shareBtn.addEventListener("click",this.sharePlaceHandler.bind(this)),e.addEventListener("submit",this.findAddressHandler.bind(this))}readClipboardFromDevTools(e){return console.log("Starting coping and pasting process..."),new Promise(((t,o)=>{const a=async()=>{try{await navigator.clipboard.writeText(e);const o=await navigator.clipboard.readText();alert(`${o} is read!`),t(o)}catch(e){o(e)}window.removeEventListener("focus",a)};window.addEventListener("focus",a),console.log("Hit <Tab> to give focus back to document (or we will face a DOMException);")}))}sharePlaceHandler(){const e=document.getElementById("share-link");if(!navigator.clipboard)return e.select(),void console.log("Unable to copy to clipboard!");this.readClipboardFromDevTools(e.value)}selectPlace(e,o){this.map?this.map.render():this.map=new t(e),fetch("http://localhost:3000/add-location",{method:"POST",body:JSON.stringify({address:o,lat:e.lat,lng:e.lng}),headers:{"Content-type":"application/json"}}).then((e=>e.json())).then((e=>{const t=e.locId;this.shareBtn.disabled=!1,document.getElementById("share-link").value=`${location.origin}/my-place?location=${t}`}))}locateUserHandler(){if(!navigator.geolocation)return void alert("Location feature is not available in your browser - please use a more modern browser or input your location manually");const t=new e("loading-modal-content","Loading location... Please wait");t.show(),navigator.geolocation.getCurrentPosition((async e=>{const a={lat:e.coords.latitude,lng:e.coords.longitude},n=await async function(e){const t=await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${e.lat},${e.lng}&key=${o}`);if(!t.ok)throw new Error("Failed to fetch address - Please try again");const a=await t.json();if(a.error_message)throw new Error(a.error_message);a.results[0].formatted_address}(a);t.hide(),this.selectPlace(a,n)}),(e=>{t.hide(),alert("User could not be located automatically, Please enter an address manually")}))}async findAddressHandler(t){t.preventDefault();const a=t.target.querySelector("input").value;if(!a||0==a.trim().length)return void alert("Invalid address entered - Please try again");const n=new e("loading-modal-content","Loading location... Please wait");n.show();try{const e=await async function(e){const t=encodeURI(e),a=await fetch(`https://maps.googleapis.com/maps/api/geocode/json?address=${t}&key=${o}`);if(!a.ok)throw new Error("Failed to fetch coordinates - Please try again");const n=await a.json();if(n.error_message)throw new Error(n.error_message);return n.results[0].geometry.location}(a);this.selectPlace(e,a)}catch(e){alert(e.message)}n.hide()}}})();